import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import { parseCookies } from "nookies";
import { useContext, useEffect, useState } from "react";
import { AuthContext } from "@/contexts/AuthContext";
import { FaTrash } from "react-icons/fa";
import { BsPencilFill } from "react-icons/bs";
import { AiOutlineCheck } from "react-icons/ai";
import fetchDelete from "@/helpers/fetchDelete";
import fetchUpdate from "@/helpers/fetchUpdate";
import getData from "@/helpers/getData";
import { Navbar } from "@/components/Navbar";
import { EditModal } from "@/components/EditModal";
import { AddTag } from "@/components/AddTag";
const { io } = require("socket.io-client");
const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [loading, setLoading] = useState(true);
  const [todo, setTodo] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [sfetch, setFetch] = useState(false);
  let socket = io();
  const { user } = useContext(AuthContext);

  const initialState = {
    id: "",
    title: "",
    description: "",
    done: false,
  };
  const [newTag, setNewTag] = useState({
    ...initialState,
  });

  const [editTag, setEditTag] = useState({
    ...initialState,
  });

  const socketInitializer = async () => {
    await fetch("/api/socket");
    socket = io();
    socket.on("get-data", (data) => {
      getData(user, setTodo, setLoading);
    });
  };

  useEffect(() => {
    //socketInitializer();
    setInterval(() => {
      getData(user, setTodo, setLoading);
    }, 3000)

    return () => {
      //socket.disconnect();
    };
  }, [user]);

  return (
    <>
      <Head>
        <title>TodoAPP | Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!loading ? (
        <div className="w-screen h-fit min-h-screen max-w-full bg-background-neutral dark:bg-dark-background-neutral scrollbar-hide">
          {showModal && EditModal(setEditTag, setShowModal, socket, editTag, loading)}
          <Navbar />
          <main className="w-full flex justify-center items-center">
            {todo.length ? (
              <div className="flex flex-col  sm:w-full md:w-2/4  z-[100]">
                <AddTag
                  setFetch={setFetch}
                  setNewTag={setNewTag}
                  socket={socket}
                  initialState={initialState}
                  newTag={newTag}
                  sfetch={sfetch}
                />
                <div className="w-full flex flex-col gap-4 divide-dark-border-light divide-solid my-12">
                  {todo.map((item, index) => (
                    <div
                      key={item.id}
                      style={{ filter: item.done ? "brightness(0.5)" : "" }}
                      className="animate-fade-up flex hover:scale-[102%] duration-150 max-w-full rounded-sm items-center justify-between px-8 py-2 gap-4 bg-dark-background-light/50 dark:bg-dark-background-primary text-dark-background-base dark:text-dark-typography-base "
                    >
                      <div className="flex items-center justify-around gap-4 max-w-full">
                        <button
                          style={{
                            backgroundColor: item.done
                              ? "#6bb100"
                              : "transparent",
                            borderColor: item.done ? "transparent" : "",
                          }}
                          onClick={(e) =>
                            fetchUpdate(e, item, sfetch, setFetch, socket)
                          }
                          className="w-[30px] flex-shrink-0 animate-fade-in h-[30px] rounded-full border-2 border-dark-typography-light hover:opacity-60 duration-150 flex justify-center items-center"
                        >
                          {item.done ? <AiOutlineCheck size={20} /> : null}
                        </button>
                        <div className="max-w-full">
                          <p
                            style={{
                              textDecorationLine: item.done
                                ? "line-through"
                                : "",
                            }}
                            className="font-semibold"
                          >
                            {item?.title}
                          </p>
                          <span className="truncate text-sm line-clamp-2 !overflow-x-scroll scrollbar-hide">
                            {item.description}
                          </span>
                        </div>
                      </div>
                      <div className="flex justify-center items-center gap-2 flex-shrink-0">
                        <button
                          onClick={() => fetchDelete(item.id, socket)}
                          className="w-[35px] h-[35px] flex justify-center items-center rounded-full border-2 border-dark-typography-light hover:opacity-60 duration-150"
                        >
                          {<FaTrash size={14} />}
                        </button>
                        <button
                          onClick={(e) => {
                            setEditTag({ id: item.id, title: item.title }),
                              setShowModal(true);
                          }}
                          className="w-[35px] h-[35px] flex justify-center items-center rounded-full border-2 border-dark-typography-light hover:opacity-60 duration-150"
                        >
                          {<BsPencilFill />}
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className="flex flex-col  sm:w-full md:w-2/4">
                <AddTag
                  setFetch={setFetch}
                  setNewTag={setNewTag}
                  socket={socket}
                  initialState={initialState}
                  newTag={newTag}
                  sfetch={sfetch}
                />
                <div className="animate-fade-up flex flex-col justify-center items-center py-12 gap-8 text-dark-background-base dark:text-dark-typography-base">
                  <p className="font-bold">
                    NÃ£o encontramos nenhuma tarefa ainda.
                  </p>
                  <Image
                    src={"/search.gif"}
                    width={200}
                    height={200}
                    alt={"Searching animation"}
                  />
                </div>
              </div>
            )}
          </main>
        </div>
      ) : (
        <></>
      )}
    </>
  );
}

export const getServerSideProps = async (ctx) => {
  const { token } = parseCookies(ctx);

  if (!token) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: {},
  };
};
