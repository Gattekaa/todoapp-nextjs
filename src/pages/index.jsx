import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { parseCookies } from "nookies";
import { useContext, useEffect, useState } from "react";
import { AuthContext } from "@/contexts/AuthContext";
import connection from "@/config/connection";
import { FaTrash } from "react-icons/fa";
import { BsPencilFill } from "react-icons/bs";
import { AiOutlineCheck } from "react-icons/ai";
import { CiLogout } from "react-icons/ci";
import { IoMdAdd } from "react-icons/io";
import io from "Socket.IO-client";

import Link from "next/link";
const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [loading, setLoading] = useState(true);
  const [todo, setTodo] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [sfetch, setFetch] = useState(false);
  let socket = io()
  const { user, destroySession } = useContext(AuthContext);

  const initialState = {
    id: "",
    title: "",
    description: "",
    done: false,
  };
  const [newTag, setNewTag] = useState({
    ...initialState,
  });

  const [editTag, setEditTag] = useState({
    ...initialState,
  });

  async function getData() {
    if (!user) return;
    const { data } = await connection.get(`/task/?id=${user.id}`);
    setTodo(data);
    setLoading(false);
  }
  async function fetchLogout() {
    await destroySession();
  }

  async function fetchDelete(id) {
    try {
      const data = await connection.delete(`/task?id=${id}`);
      socket.emit('refresh-data')
    } catch (err) {
      console.log(err);
    }
  }

  async function fetchUpdate(e, item) {
    e.preventDefault();
    if (sfetch) return;
    setFetch(true);

    try {
      const data = await connection.patch(`/task`, {
        ...item,
        done: !item.done,
      });
      socket.emit('refresh-data')
      setShowModal(false);
    } catch (err) {
    } finally {
      setFetch(false);
    }
  }
  async function fetchTitleUpdate(e, item) {
    e.preventDefault();
    try {
      const data = await connection.patch(`/task`, {
        ...item,
      });
      socket.emit('refresh-data')
      setShowModal(false);
    } catch (err) {}
  }

  async function fetchNewTag(e) {
    e.preventDefault();
    setFetch(true);
    try {
      const data = await connection.post(`/task/`, {
        id: user.id,
        title: newTag.title,
        description: newTag.description,
      });
      socket.emit('refresh-data')
    } catch (err) {
      console.log(err);
    } finally {
      setNewTag({ ...initialState });
      setFetch(false);
    }
  }

  const editModal = () => {
    return (
      <div className="absolute w-screen h-screen backdrop-blur-[2px] duration-150 z-[1000] flex justify-center items-center">
        <div className="w-[500px] h-fit rounded-xl px-4 py-10 text-center bg-background-neutral dark:bg-dark-background-base text-dark-background-base dark:text-dark-typography-base">
          <p className="font-bold text-xl">Edit</p>
          <form
            className="px-8 py-10"
            onSubmit={(e) => fetchTitleUpdate(e, editTag)}
          >
            <div className="flex flex-col gap-8">
              <input
                type="text"
                placeholder="Title"
                value={editTag.title}
                disabled={loading}
                required
                onChange={(e) => {
                  e.stopPropagation(),
                    setEditTag({ ...editTag, title: e.target.value });
                }}
                className="w-full h-10 px-4 bg-background-neutral dark:bg-dark-background-base border-2 border-dark-background-light/50 dark:border-dark-background-light rounded-xl text-typography-light dark:text-dark-typography-base"
              />
              <div className="flex justify-around gap-4">
                <button className="bg-dark-background-neutral flex-1 py-4 rounded-xl">
                  Confirm
                </button>
                <button
                  onClick={() => {
                    setEditTag({ ...editTag, done: !editTag.done }),
                      setShowModal(false);
                  }}
                  className="bg-dark-typography-light/50 flex-1 py-4 rounded-xl"
                >
                  Cancel
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const socketInitializer = async () => {
    await fetch("/api/socket");
    socket = io();
    socket.on("get-data", (data) => {
      getData()
    });
  };


  useEffect(() => {
    socketInitializer()
    getData();

    return () => {
      socket.disconnect()
    }
  }, [user]);

  const handleEmit = () => {
    return socket.emit('send-message', 'test')

  }

  return (
    <>
      <Head>
        <title>TodoAPP | Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!loading ? (
        <div className="w-screen h-fit min-h-screen max-w-full bg-background-neutral dark:bg-dark-background-neutral scrollbar-hide">
          {showModal && editModal()}
          <nav className="bg-background-neutral sticky top-[0px] left-0 dark:bg-dark-background-base z-[900] flex items-center justify-around w-full h-[60px]">
            <h1 className="text-dark-background-base dark:text-dark-typography-base text-xl font-black">
              TodoApp
            </h1>
            <li className="flex gap-8 list-none text-dark-background-base dark:text-dark-typography-base">
              {!user ? (
                <>
                  <ul className=" bg-dark-typography-light dark:bg-dark-border-light py-2 px-4 rounded-xl hover:opacity-60 duration-150">
                    <Link href={"/login"}>Sign in</Link>
                  </ul>
                  <ul className=" bg-dark-typography-light dark:bg-dark-border-light py-2 px-4 rounded-xl hover:opacity-60 duration-150">
                    <Link href={"/register"}>Sign up</Link>
                  </ul>
                </>
              ) : (
                <ul className="bg-dark-background-light/50 dark:bg-dark-border-light py-2 px-4 rounded-xl hover:opacity-60 duration-150">
                  <button
                    onClick={() => fetchLogout()}
                    className="flex items-center justify-center gap-2"
                  >
                    <CiLogout />
                    Logout
                  </button>
                  
                </ul>,
                      <button onClick={() => handleEmit()}>test</button>
                
              )}
            </li>
          </nav>
          <main className="w-full flex justify-center items-center">
            {todo.length ? (
              <div className="flex flex-col  sm:w-full md:w-2/4  z-[100]">
                <div className="flex flex-col  rounded-sm items-center justify-between mt-8 bg-dark-background-light/50 dark:bg-dark-background-primary text-dark-background-base dark:text-dark-typography-base">
                  <div className="flex gap-4 w-full h-[65px] px-8 py-2 items-center justify-between">
                    <button className="w-[30px] flex-shrink-0 h-[30px] rounded-full border-2 border-dark-typography-light cursor-default flex justify-center items-center"></button>
                    <form
                      className="w-full"
                      id="newTagForm"
                      onSubmit={(e) => fetchNewTag(e)}
                    >
                      <input
                        type="text"
                        placeholder="Add a tag"
                        required
                        disabled={sfetch}
                        value={newTag.title}
                        maxLength={80}
                        onChange={(e) =>
                          setNewTag({ ...newTag, title: e.target.value })
                        }
                        className="w-full h-full bg-transparent outline-none placeholder:text-dark-background-base placeholder:dark:text-dark-typography-base"
                      />
                    </form>
                  </div>
                  <div className="w-full flex justify-end bg-dark-background-light/50 px-8 py-2 dark:bg-dark-border-light">
                    <button
                      type="submit"
                      form="newTagForm"
                      disabled={sfetch}
                      className="px-2 py-1 bg-dark-background-light/50 dark:bg-dark-background-primary hover:opacity-60 duration-150"
                    >
                      <IoMdAdd size={20} />
                    </button>
                  </div>
                </div>
                <div className="w-full flex flex-col gap-4 divide-dark-border-light divide-solid my-12">
                  {todo.map((item, index) => (
                    <div
                      key={item.id}
                      style={{ filter: item.done ? "brightness(0.5)" : "" }}
                      className="animate-fade-up flex hover:scale-[102%] duration-150 max-w-full rounded-sm items-center justify-between px-8 py-2 gap-4 bg-dark-background-light/50 dark:bg-dark-background-primary text-dark-background-base dark:text-dark-typography-base "
                    >
                      <div className="flex items-center justify-around gap-4 max-w-full">
                        <button
                          style={{
                            backgroundColor: item.done
                              ? "#6bb100"
                              : "transparent",
                            borderColor: item.done ? "transparent" : "",
                          }}
                          onClick={(e) => fetchUpdate(e, item)}
                          className="w-[30px] flex-shrink-0 animate-fade-in h-[30px] rounded-full border-2 border-dark-typography-light hover:opacity-60 duration-150 flex justify-center items-center"
                        >
                          {item.done ? <AiOutlineCheck size={20} /> : null}
                        </button>
                        <div className="max-w-full">
                          <p
                            style={{
                              textDecorationLine: item.done
                                ? "line-through"
                                : "",
                            }}
                            className="font-semibold"
                          >
                            {item?.title}
                          </p>
                          <span className="truncate text-sm line-clamp-2 !overflow-x-scroll scrollbar-hide">
                            {item.description}
                          </span>
                        </div>
                      </div>
                      <div className="flex justify-center items-center gap-2 flex-shrink-0">
                        <button
                          onClick={() => fetchDelete(item.id)}
                          className="w-[35px] h-[35px] flex justify-center items-center rounded-full border-2 border-dark-typography-light hover:opacity-60 duration-150"
                        >
                          {<FaTrash size={14} />}
                        </button>
                        <button
                          onClick={(e) => {
                            setEditTag({ id: item.id, title: item.title }),
                              setShowModal(true);
                          }}
                          className="w-[35px] h-[35px] flex justify-center items-center rounded-full border-2 border-dark-typography-light hover:opacity-60 duration-150"
                        >
                          {<BsPencilFill />}
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className="flex flex-col  sm:w-full md:w-2/4">
                <div className="flex flex-col  rounded-sm items-center justify-between mt-8 bg-dark-background-light/50 dark:bg-dark-background-primary text-dark-background-base dark:text-dark-typography-base">
                  <div className="flex gap-4 w-full h-[65px] px-8 py-2 items-center justify-between">
                    <button className="w-[30px] flex-shrink-0 h-[30px] rounded-full border-2 border-dark-typography-light cursor-default flex justify-center items-center"></button>
                    <form
                      className="w-full"
                      id="newTagForm"
                      onSubmit={(e) => fetchNewTag(e)}
                    >
                      <input
                        type="text"
                        placeholder="Add a tag"
                        required
                        value={newTag.title}
                        onChange={(e) =>
                          setNewTag({ ...newTag, title: e.target.value })
                        }
                        className="w-full h-full bg-transparent outline-none placeholder:text-dark-background-base placeholder:dark:text-dark-typography-base"
                      />
                    </form>
                  </div>
                  <div className="w-full flex justify-end bg-dark-background-light/50 px-8 py-2 dark:bg-dark-border-light">
                    <button
                      type="submit"
                      form="newTagForm"
                      disabled={sfetch}
                      className="px-2 py-1 bg-dark-background-light/50 dark:bg-dark-background-primary hover:opacity-60 duration-150"
                    >
                      <IoMdAdd size={20} />
                    </button>
                  </div>
                </div>
                <div className="animate-fade-up flex flex-col justify-center items-center py-12 gap-8 text-dark-background-base dark:text-dark-typography-base">
                  <p className="font-bold">
                    Não encontramos nenhuma tarefa ainda.
                  </p>
                  <Image
                    src={"/search.gif"}
                    width={200}
                    height={200}
                    alt={"Searching animation"}
                  />
                </div>
              </div>
            )}
          </main>
        </div>
      ) : (
        <></>
      )}
    </>
  );
}

export const getServerSideProps = async (ctx) => {
  const { token } = parseCookies(ctx);

  if (!token) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: {},
  };
};
